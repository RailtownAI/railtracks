import yaml
import os
from enum import Enum


class ExceptionMessageKey(Enum):
    CLASSMETHOD_REQUIRED_MSG = "CLASSMETHOD_REQUIRED_MSG"
    CLASSMETHOD_REQUIRED_NOTES = "CLASSMETHOD_REQUIRED_NOTES"
    CONNECTED_NODES_EMPTY_MSG = "CONNECTED_NODES_EMPTY_MSG"
    CONNECTED_NODES_EMPTY_NOTES = "CONNECTED_NODES_EMPTY_NOTES"
    CONNECTED_NODES_TYPE_MSG = "CONNECTED_NODES_TYPE_MSG"
    CONNECTED_NODES_TYPE_NOTES = "CONNECTED_NODES_TYPE_NOTES"
    DICT_PARAMETER_NOT_ALLOWED_MSG = "DICT_PARAMETER_NOT_ALLOWED_MSG"
    DICT_PARAMETER_NOT_ALLOWED_NOTES = "DICT_PARAMETER_NOT_ALLOWED_NOTES"
    DUPLICATE_PARAMETER_NAMES_MSG = "DUPLICATE_PARAMETER_NAMES_MSG"
    DUPLICATE_PARAMETER_NAMES_NOTES = "DUPLICATE_PARAMETER_NAMES_NOTES"
    INVALID_SYSTEM_MESSAGE_MSG = "INVALID_SYSTEM_MESSAGE_MSG"
    OUTPUT_MODEL_REQUIRED_MSG = "OUTPUT_MODEL_REQUIRED_MSG"
    OUTPUT_MODEL_REQUIRED_NOTES = "OUTPUT_MODEL_REQUIRED_NOTES"
    OUTPUT_MODEL_TYPE_MSG = "OUTPUT_MODEL_TYPE_MSG"
    OUTPUT_MODEL_TYPE_NOTES = "OUTPUT_MODEL_TYPE_NOTES"
    OUTPUT_MODEL_EMPTY_MSG = "OUTPUT_MODEL_EMPTY_MSG"
    OUTPUT_MODEL_EMPTY_NOTES = "OUTPUT_MODEL_EMPTY_NOTES"
    MISSING_PRETTY_NAME_MSG = "MISSING_PRETTY_NAME_MSG"
    MISSING_TOOL_DETAILS_MSG = "MISSING_TOOL_DETAILS_MSG"
    MISSING_TOOL_DETAILS_NOTES = "MISSING_TOOL_DETAILS_NOTES"


_yaml_path = os.path.join(os.path.dirname(__file__), "exception_messages.yaml")
with open(_yaml_path, "r", encoding="utf-8") as f:
    _messages = yaml.safe_load(f)


def get_message(key: str) -> str:
    if isinstance(key, Enum):
        key = key.value
    return _messages[key]


def get_notes(key: str) -> str:
    if isinstance(key, Enum):
        key = key.value
    return _messages[key]
