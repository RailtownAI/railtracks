name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DISALLOWED_LICENSES: "GPL|AGPL|EPL"

jobs:
  ruff-lint:
    name: Check Code with Ruff
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Specify the Python version you are using

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff Check
        run: ruff check . --no-fix

      - name: Run Ruff Format
        run: ruff format --check .

  check-licenses:
    name: Check Licenses
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: packages/railtracks
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pip-licenses

      - name: Check Railtracks Core Dependencies Licenses
        working-directory: packages/railtracks
        run: |
          pip-licenses --format=csv > licenses.csv
          if grep -E "${{ env.DISALLOWED_LICENSES }}" licenses.csv; then
            echo "❌ Disallowed licenses found in direct dependencies:"
            grep -E "${{ env.DISALLOWED_LICENSES }}" licenses.csv
            exit 1
          else
            echo "✅ No disallowed licenses found in direct dependencies"
          fi

      - name: License analysis
        if: always()
        run: |
          echo "## 📦 Licenses Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pip-licenses --summary --from=classifier --format=markdown --with-system >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build and Test
    runs-on: windows-latest
    needs:
      - ruff-lint
      - check-licenses

    steps:
      - name: Print System Architecture
        run: uname -m

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r docs/scripts/requirements.txt

      - name: Check pyproject.toml dependency order
        run: |
          python -m pip install --upgrade pip
          pip install tomlkit==0.11.8
          python scripts/check_dependencies_sorted.py
      
      - name: Validate Documentation Scripts
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.INTEGRATION_TESTS_OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.INTEGRATION_TESTS_ANTHROPIC_API_KEY }}
          HF_TOKEN: ${{ secrets.INTEGRATION_TESTS_HUGGINGFACE_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.INTEGRATION_TESTS_GEMINI_API_KEY }}
        run: |
          ./scripts/docs_validation.sh

      - name: Run tests
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.INTEGRATION_TESTS_OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.INTEGRATION_TESTS_ANTHROPIC_API_KEY }}
          HF_TOKEN: ${{ secrets.INTEGRATION_TESTS_HUGGINGFACE_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.INTEGRATION_TESTS_GEMINI_API_KEY }}
        run: |
          pip list
          pip install pytest-timeout
          pytest -s -v --junit-xml=test-results.xml --timeout=200 --ignore=packages/railtracks-cli

  build-railtracks-cli:
    name: Build Railtracks CLI
    runs-on: ubuntu-latest
    needs: ruff-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        working-directory: packages/railtracks-cli
        run: |
          python -m pip install --upgrade pip
          pip install -e ../railtracks
          pip install -e .

      - name: Run tests
        shell: bash
        working-directory: packages/railtracks-cli
        continue-on-error: true
        run: |
          python run_tests.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cli-test-results
          path: packages/railtracks-cli/test-results.xml
          if-no-files-found: ignore
