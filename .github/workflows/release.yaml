name: Publish to Azure Artifacts on Release

on:
  release:
    types: [published]

permissions:
  id-token: write # Required for Azure authentication

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Extract Package Name and Version
        id: package-infoGG
        run: |
          PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          PACKAGE_VERSION=$(python -c "import re; version_pattern = r'__version__\s*=\s*[\'\"](.*?)[\'\"]'; print(re.search(version_pattern, open('src/railtownai/__init__.py').read()).group(1))")
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Check if version already exists on Azure Artifacts
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u AZURE:${{ secrets.AZURE_ARTIFACTS_PAT }} \
            "https://pkgs.dev.azure.com/railtownai/_packaging/request-completion/pypi/simple/${PACKAGE_NAME}/")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Checking if version $PACKAGE_VERSION exists..."
            if curl -s "https://pkgs.dev.azure.com/railtownai/_packaging/request-completion/pypi/simple/${PACKAGE_NAME}/" | grep -q "$PACKAGE_VERSION"; then
              echo "Version $PACKAGE_VERSION of $PACKAGE_NAME already exists on Azure Artifacts."
              exit 1
            fi
          fi

      - name: Install Flit
        run: pip install flit

      - name: Build and Publish with Flit
        env:
          FLIT_INDEX_URL: 'https://pkgs.dev.azure.com/railtownai/_packaging/request-completion/pypi/upload/'
          FLIT_USERNAME: 'AZURE'
          FLIT_PASSWORD: ${{ secrets.AZURE_ARTIFACTS_PAT }}
        run: |
          flit publish --repository "$FLIT_INDEX_URL"
