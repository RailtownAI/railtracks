window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "railtracks", "modulename": "railtracks", "kind": "module", "doc": "<p>Railtown AI RailTracks Framework for building resilient agentic systems</p>\n"}, {"fullname": "railtracks.Session", "modulename": "railtracks", "qualname": "Session", "kind": "class", "doc": "<p>The main class for managing an execution session.</p>\n\n<p>This class is responsible for setting up all the necessary components for running a Railtracks execution, including the coordinator, publisher, and state management.</p>\n\n<p>For the configuration parameters of the setting. It will follow this precedence:</p>\n\n<ol>\n<li>The parameters in the <code>Session</code> constructor.</li>\n<li>The parameters in global context variables.</li>\n<li>The default values.</li>\n</ol>\n\n<p>Default Values:</p>\n\n<ul>\n<li><code>name</code>: None</li>\n<li><code>timeout</code>: 150.0 seconds</li>\n<li><code>end_on_error</code>: False</li>\n<li><code>logging_setting</code>: \"REGULAR\"</li>\n<li><code>log_file</code>: None (logs will not be written to a file)</li>\n<li><code>broadcast_callback</code>: None (no callback for broadcast messages)</li>\n<li><code>prompt_injection</code>: True (the prompt will be automatically injected from context variables)</li>\n<li><code>save_state</code>: True (the state of the execution will be saved to a file at the end of the run in the <code>.railtracks</code> directory)</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str | None, optional):</strong>  Optional name for the session. This name will be included in the saved state file if <code>save_state</code> is True.</li>\n<li><strong>context (Dict[str, Any], optional):</strong>  A dictionary of global context variables to be used during the execution.</li>\n<li><strong>timeout (float, optional):</strong>  The maximum number of seconds to wait for a response to your top-level request.</li>\n<li><strong>end_on_error (bool, optional):</strong>  If True, the execution will stop when an exception is encountered.</li>\n<li><strong>logging_setting (allowable_log_levels, optional):</strong>  The setting for the level of logging you would like to have.</li>\n<li><strong>log_file (str | os.PathLike | None, optional):</strong>  The file to which the logs will be written.</li>\n<li><strong>broadcast_callback (Callable[[str], None] | Callable[[str], Coroutine[None, None, None]] | None, optional):</strong>  A callback function that will be called with the broadcast messages.</li>\n<li><strong>prompt_injection (bool, optional):</strong>  If True, the prompt will be automatically injected from context variables.</li>\n<li><strong>save_state (bool, optional):</strong>  If True, the state of the execution will be saved to a file at the end of the run in the <code>.railtracks</code> directory.</li>\n</ul>\n"}, {"fullname": "railtracks.Session.__init__", "modulename": "railtracks", "qualname": "Session.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast_callback</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "railtracks.Session.executor_config", "modulename": "railtracks", "qualname": "Session.executor_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.Session.name", "modulename": "railtracks", "qualname": "Session.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.Session.publisher", "modulename": "railtracks", "qualname": "Session.publisher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": railtracks.pubsub.publisher.RTPublisher"}, {"fullname": "railtracks.Session.coordinator", "modulename": "railtracks", "qualname": "Session.coordinator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.Session.rt_state", "modulename": "railtracks", "qualname": "Session.rt_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.Session.global_config_precedence", "modulename": "railtracks", "qualname": "Session.global_config_precedence", "kind": "function", "doc": "<p>Uses the following precedence order to determine the configuration parameters:</p>\n\n<ol>\n<li>The parameters in the method parameters.</li>\n<li>The parameters in global context variables.</li>\n<li>The default values.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast_callback</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExecutorConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.Session.info", "modulename": "railtracks", "qualname": "Session.info", "kind": "variable", "doc": "<p>Returns the current state of the runner.</p>\n\n<p>This is useful for debugging and viewing the current state of the run.</p>\n", "annotation": ": railtracks.state.info.ExecutionInfo"}, {"fullname": "railtracks.Session.payload", "modulename": "railtracks", "qualname": "Session.payload", "kind": "function", "doc": "<p>Gets the complete json payload tied to this session.</p>\n\n<p>The outputted json schema is maintained in (link here)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.session", "modulename": "railtracks", "qualname": "session", "kind": "function", "doc": "<p>This decorator automatically creates and manages a Session context for the decorated function,\nallowing async functions to use RailTracks operations without manually managing the session lifecycle.</p>\n\n<p>Can be used as:</p>\n\n<ul>\n<li>@session (without parentheses) - uses default settings</li>\n<li>@session() (with empty parentheses) - uses default settings</li>\n<li>@session(name=\"my_task\", timeout=30) (with configuration parameters)</li>\n</ul>\n\n<p>When using this decorator, the function returns a tuple containing:</p>\n\n<ol>\n<li>The original function's return value</li>\n<li>The Session object used during execution</li>\n</ol>\n\n<p>This allows access to session information (like execution state, logs, etc.) after the function completes,\nwhile maintaining the simplicity of decorator usage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str | None, optional):</strong>  Optional name for the session. This name will be included in the saved state file if <code>save_state</code> is True.</li>\n<li><strong>context (Dict[str, Any], optional):</strong>  A dictionary of global context variables to be used during the execution.</li>\n<li><strong>timeout (float, optional):</strong>  The maximum number of seconds to wait for a response to your top-level request.</li>\n<li><strong>end_on_error (bool, optional):</strong>  If True, the execution will stop when an exception is encountered.</li>\n<li><strong>logging_setting (allowable_log_levels, optional):</strong>  The setting for the level of logging you would like to have.</li>\n<li><strong>log_file (str | os.PathLike | None, optional):</strong>  The file to which the logs will be written.</li>\n<li><strong>broadcast_callback (Callable[[str], None] | Callable[[str], Coroutine[None, None, None]] | None, optional):</strong>  A callback function that will be called with the broadcast messages.</li>\n<li><strong>prompt_injection (bool, optional):</strong>  If True, the prompt will be automatically injected from context variables.</li>\n<li><strong>save_state (bool, optional):</strong>  If True, the state of the execution will be saved to a file at the end of the run in the <code>.railtracks</code> directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>When used as @session (without parentheses): Returns the decorated function that returns (result, session).\n  When used as @session(...) (with parameters): Returns a decorator function that takes an async function\n  and returns a new async function that returns (result, session).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast_callback</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">,</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">]]],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">]]],</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">,</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.call", "modulename": "railtracks", "qualname": "call", "kind": "function", "doc": "<p>Call a node from within a node inside the framework. This will return a coroutine that you can interact with\nin whatever way using async/await logic.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># for sequential operation</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">NodeA</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hello world&quot;</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># for parallel operation</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">NodeA</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hello world&quot;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  The node type you would like to create. This could be a function decorated with <code>@function_node</code>, a function, or a Node instance.</li>\n<li><strong>*args:</strong>  The arguments to pass to the node</li>\n<li><strong>**kwargs:</strong>  The keyword arguments to pass to the node</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node_</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">]],</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">built_nodes</span><span class=\"o\">.</span><span class=\"n\">concrete</span><span class=\"o\">.</span><span class=\"n\">function_base</span><span class=\"o\">.</span><span class=\"n\">RTFunction</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_TOutput</span>:</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.broadcast", "modulename": "railtracks", "qualname": "broadcast", "kind": "function", "doc": "<p>Streams the given message</p>\n\n<p>This will trigger the broadcast_callback callback you have already provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (str):</strong>  The item you want to stream.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.call_batch", "modulename": "railtracks", "qualname": "call_batch", "kind": "function", "doc": "<p>Complete a node over multiple iterables, allowing for parallel execution.</p>\n\n<p>Note the results will be returned in the order of the iterables, not the order of completion.</p>\n\n<p>If one of the nodes returns an exception, the thrown exception will be included as a response.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  The node type to create.</li>\n<li><strong>*iterables:</strong>  The iterables to map the node over.</li>\n<li><strong>return_exceptions:</strong>  If True, exceptions will be returned as part of the results.\nIf False, exceptions will be raised immediately, and you will lose access to the results.\nDefaults to true.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An iterable of results from the node.</p>\n</blockquote>\n\n<h6 id=\"usage\">Usage:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">batch</span><span class=\"p\">(</span><span class=\"n\">NodeA</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;hello world&quot;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Callable[..., Node[_TOutput]] | Callable[..., _TOutput] | _AsyncNodeAttachedFunc[_P, _TOutput] | _SyncNodeAttachedFunc[_P, _TOutput]&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">iterables</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">return_exceptions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.ExecutionInfo", "modulename": "railtracks", "qualname": "ExecutionInfo", "kind": "class", "doc": "<p>A class that contains the full details of the state of a run at any given point in time.</p>\n\n<p>The class is designed to be used as a snapshot of state that can be used to display the state of the run, or to\ncreate a graphical representation of the system.</p>\n"}, {"fullname": "railtracks.ExecutionInfo.__init__", "modulename": "railtracks", "qualname": "ExecutionInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request_forest</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">RequestForest</span>,</span><span class=\"param\">\t<span class=\"n\">node_forest</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">NodeForest</span>,</span><span class=\"param\">\t<span class=\"n\">stamper</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">profiling</span><span class=\"o\">.</span><span class=\"n\">StampManager</span></span>)</span>"}, {"fullname": "railtracks.ExecutionInfo.request_forest", "modulename": "railtracks", "qualname": "ExecutionInfo.request_forest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutionInfo.node_forest", "modulename": "railtracks", "qualname": "ExecutionInfo.node_forest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutionInfo.stamper", "modulename": "railtracks", "qualname": "ExecutionInfo.stamper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutionInfo.default", "modulename": "railtracks", "qualname": "ExecutionInfo.default", "kind": "function", "doc": "<p>Creates a new \"empty\" instance of the ExecutionInfo class with the default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">ExecutionInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.ExecutionInfo.create_new", "modulename": "railtracks", "qualname": "ExecutionInfo.create_new", "kind": "function", "doc": "<p>Creates a new empty instance of state variables with the provided executor configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">ExecutionInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.ExecutionInfo.answer", "modulename": "railtracks", "qualname": "ExecutionInfo.answer", "kind": "variable", "doc": "<p>Convenience method to access the answer of the run.</p>\n"}, {"fullname": "railtracks.ExecutionInfo.all_stamps", "modulename": "railtracks", "qualname": "ExecutionInfo.all_stamps", "kind": "variable", "doc": "<p>Convenience method to access all the stamps of the run.</p>\n", "annotation": ": List[railtracks.utils.profiling.Stamp]"}, {"fullname": "railtracks.ExecutionInfo.name", "modulename": "railtracks", "qualname": "ExecutionInfo.name", "kind": "variable", "doc": "<p>Gets the name of the graph by pulling the name of the insertion request. It will raise a ValueError if the insertion\nrequest is not present or there are multiple insertion requests.</p>\n"}, {"fullname": "railtracks.ExecutionInfo.insertion_requests", "modulename": "railtracks", "qualname": "ExecutionInfo.insertion_requests", "kind": "variable", "doc": "<p>A convenience method to access all the insertion requests of the run.</p>\n"}, {"fullname": "railtracks.ExecutionInfo.graph_serialization", "modulename": "railtracks", "qualname": "ExecutionInfo.graph_serialization", "kind": "function", "doc": "<p>Creates a string (JSON) representation of this info object designed to be used to construct a graph for this\n        info object.</p>\n\n<pre><code>    Some important notes about its structure are outlined below:\n    - The `nodes` key contains a list of all the nodes in the graph, represented as `Vertex` objects.\n    - The `edges` key contains a list of all the edges in the graph, represented as `Edge` objects.\n    - The `stamps` key contains an ease of use list of all the stamps associated with the run, represented as `Stamp` objects.\n\n    - The \"nodes\" and \"requests\" key will be outlined with normal graph details like connections and identifiers in addition to a loose details object.\n    - However, both will carry an addition param called \"stamp\" which is a timestamp style object.\n    - They also will carry a \"parent\" param which is a recursive structure that allows you to traverse the graph in time.\n</code></pre>\n\n<p>```</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.ExecutorConfig", "modulename": "railtracks", "qualname": "ExecutorConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.__init__", "modulename": "railtracks", "qualname": "ExecutorConfig.__init__", "kind": "function", "doc": "<p>ExecutorConfig is special configuration object designed to allow customization of the executor in the RT system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeout (float):</strong>  The maximum number of seconds to wait for a response to your top level request</li>\n<li><strong>end_on_error (bool):</strong>  If true, the executor will stop execution when an exception is encountered.</li>\n<li><strong>logging_setting (allowable_log_levels):</strong>  The setting for the level of logging you would like to have.</li>\n<li><strong>log_file (str | os.PathLike | None):</strong>  The file to which the logs will be written. If None, no file will be created.</li>\n<li><strong>broadcast_callback (Callable or Coroutine):</strong>  A function or coroutine that will handle streaming messages.</li>\n<li><strong>prompt_injection (bool):</strong>  If true, prompts can be injected with global context</li>\n<li><strong>save_state (bool):</strong>  If true, the state of the executor will be saved to disk.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">150.0</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;REGULAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast_callback</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "railtracks.ExecutorConfig.timeout", "modulename": "railtracks", "qualname": "ExecutorConfig.timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.end_on_error", "modulename": "railtracks", "qualname": "ExecutorConfig.end_on_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.logging_setting", "modulename": "railtracks", "qualname": "ExecutorConfig.logging_setting", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.subscriber", "modulename": "railtracks", "qualname": "ExecutorConfig.subscriber", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.log_file", "modulename": "railtracks", "qualname": "ExecutorConfig.log_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.prompt_injection", "modulename": "railtracks", "qualname": "ExecutorConfig.prompt_injection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.save_state", "modulename": "railtracks", "qualname": "ExecutorConfig.save_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ExecutorConfig.precedence_overwritten", "modulename": "railtracks", "qualname": "ExecutorConfig.precedence_overwritten", "kind": "function", "doc": "<p>If any of the parameters are provided (not None), it will create a new update the current instance with the new values and return a deep copied reference to it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subscriber</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.set_config", "modulename": "railtracks", "qualname": "set_config", "kind": "function", "doc": "<p>Sets the global configuration for the executor. This will be propagated to all new runners created after this call.</p>\n\n<ul>\n<li>If you call this function after the runner has been created, it will not affect the current runner.</li>\n<li>This function will only overwrite the values that are provided, leaving the rest unchanged.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_setting</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;VERBOSE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REGULAR&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QUIET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NONE&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast_callback</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_injection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.function_node", "modulename": "railtracks", "qualname": "function_node", "kind": "function", "doc": "<p>Creates a new Node type from a function that can be used in <code>rt.call()</code>.</p>\n\n<p>By default, it will parse the function's docstring and turn them into tool details and parameters. However, if\nyou provide custom ToolManifest it will override that logic.</p>\n\n<p>WARNING: If you overriding tool parameters. It is on you to make sure they will work with your function.</p>\n\n<p>NOTE: If you have already converted this function to a node this function will do nothing</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Callable):</strong>  The function to convert into a Node.</li>\n<li><strong>name (str, optional):</strong>  Human-readable name for the node/tool.</li>\n<li><strong>manifest (ToolManifest, optional):</strong>  The details you would like to override the tool with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_TOutput</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manifest</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">manifest</span><span class=\"o\">.</span><span class=\"n\">ToolManifest</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.agent_node", "modulename": "railtracks", "qualname": "agent_node", "kind": "function", "doc": "<p>Dynamically creates an agent based on the provided parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str | None):</strong>  The name of the agent. If none the default will be used.</li>\n<li><strong>tool_nodes (set[Type[Node] | Callable | RTFunction] | None):</strong>  If your agent is a LLM with access to tools, what does it have access to?</li>\n<li><strong>output_schema (Type[_TBaseModel] | None):</strong>  If your agent should return a structured output, what is the output_schema?</li>\n<li><strong>llm (ModelBase | None):</strong>  The LLM model to use. If None it will need to be passed in at instance time.</li>\n<li><strong>max_tool_calls (int | None):</strong>  Maximum number of tool calls allowed (if it is a ToolCall Agent).</li>\n<li><strong>system_message (SystemMessage | str | None):</strong>  System message for the agent.</li>\n<li><strong>manifest (ToolManifest | None):</strong>  If you want to use this as a tool in other agents you can pass in a ToolManifest.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">tool_nodes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">built_nodes</span><span class=\"o\">.</span><span class=\"n\">concrete</span><span class=\"o\">.</span><span class=\"n\">function_base</span><span class=\"o\">.</span><span class=\"n\">RTFunction</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_schema</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_TBaseModel</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">llm</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelBase</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_tool_calls</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">system_message</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">SystemMessage</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manifest</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">manifest</span><span class=\"o\">.</span><span class=\"n\">ToolManifest</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.chatui_node", "modulename": "railtracks", "qualname": "chatui_node", "kind": "function", "doc": "<p>Dynamically create a ChatToolCallLLM node class with a web-based chat interface.</p>\n\n<p>This easy-usage wrapper builds a node class that combines tool-calling LLM capabilities\nwith a browser-based chat UI. It allows users to interact with the LLM and connected tools\nthrough a web interface, making it ideal for interactive demonstrations and testing.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tool_nodes (Set[Union[Type[Node], Callable | RTFunction]]):</strong>  The set of node classes or callables\nthat this LLM can call as tools during conversations.</li>\n<li><strong>port (int, optional):</strong>  Port number for the web chat interface. If None, a default port\nwill be used.</li>\n<li><strong>host (str, optional):</strong>  Host address for the web chat interface. If None, defaults to\nlocalhost.</li>\n<li><strong>auto_open (bool, optional):</strong>  Whether to automatically open the chat interface in the\ndefault web browser when started. Defaults to True.</li>\n<li><strong>pretty_name (str, optional):</strong>  Human-readable name for the node/tool displayed in the\nchat interface.</li>\n<li><strong>llm (ModelBase, optional):</strong>  The LLM model instance to use for this node. If not\nspecified, a default model will be used.</li>\n<li><strong>max_tool_calls (int, optional):</strong>  Maximum number of tool calls allowed per conversation\nturn. If None, unlimited tool calls are allowed.</li>\n<li><strong>system_message (SystemMessage or str, optional):</strong>  The system prompt/message that defines\nthe LLM's behavior and role in the chat interface.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Type[ChatToolCallLLM]: The dynamically generated node class configured with the specified\n      chat interface and tool-calling capabilities.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tool_nodes</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">built_nodes</span><span class=\"o\">.</span><span class=\"n\">concrete</span><span class=\"o\">.</span><span class=\"n\">function_base</span><span class=\"o\">.</span><span class=\"n\">RTFunction</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auto_open</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pretty_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">llm</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelBase</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_tool_calls</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">system_message</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">SystemMessage</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">built_nodes</span><span class=\"o\">.</span><span class=\"n\">concrete</span><span class=\"o\">.</span><span class=\"n\">chat_tool_call_llm</span><span class=\"o\">.</span><span class=\"n\">ChatToolCallLLM</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.MCPStdioParams", "modulename": "railtracks", "qualname": "MCPStdioParams", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "mcp.client.stdio.StdioServerParameters"}, {"fullname": "railtracks.MCPStdioParams.timeout", "modulename": "railtracks", "qualname": "MCPStdioParams.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.timedelta"}, {"fullname": "railtracks.MCPStdioParams.as_stdio_params", "modulename": "railtracks", "qualname": "MCPStdioParams.as_stdio_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mcp</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">stdio</span><span class=\"o\">.</span><span class=\"n\">StdioServerParameters</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.MCPStdioParams.model_config", "modulename": "railtracks", "qualname": "MCPStdioParams.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "railtracks.MCPHttpParams", "modulename": "railtracks", "qualname": "MCPHttpParams", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "railtracks.MCPHttpParams.url", "modulename": "railtracks", "qualname": "MCPHttpParams.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "railtracks.MCPHttpParams.headers", "modulename": "railtracks", "qualname": "MCPHttpParams.headers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any] | None"}, {"fullname": "railtracks.MCPHttpParams.timeout", "modulename": "railtracks", "qualname": "MCPHttpParams.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.timedelta"}, {"fullname": "railtracks.MCPHttpParams.sse_read_timeout", "modulename": "railtracks", "qualname": "MCPHttpParams.sse_read_timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.timedelta"}, {"fullname": "railtracks.MCPHttpParams.terminate_on_close", "modulename": "railtracks", "qualname": "MCPHttpParams.terminate_on_close", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "railtracks.MCPHttpParams.model_config", "modulename": "railtracks", "qualname": "MCPHttpParams.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "railtracks.connect_mcp", "modulename": "railtracks", "qualname": "connect_mcp", "kind": "function", "doc": "<p>Returns an MCPServer class. On creation, it will connect to the MCP server and fetch the tools.\nThe connection will remain open until the server is closed with <code>close()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config:</strong>  Configuration for the MCP server, either as StdioServerParameters or MCPHttpParams.</li>\n<li><strong>client_session:</strong>  Optional ClientSession to use for the MCP server connection. If not provided, a new session will be created.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MCPServer: An instance of the MCPServer class.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">rt_mcp</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">MCPStdioParams</span> <span class=\"o\">|</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">rt_mcp</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">MCPHttpParams</span>,</span><span class=\"param\">\t<span class=\"n\">client_session</span><span class=\"p\">:</span> <span class=\"n\">mcp</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">rt_mcp</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">MCPServer</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.create_mcp_server", "modulename": "railtracks", "qualname": "create_mcp_server", "kind": "function", "doc": "<p>Create a FastMCP server that can be used to run nodes as MCP tools.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nodes:</strong>  List of Node classes to be registered as tools with the MCP server.</li>\n<li><strong>server_name:</strong>  Name of the MCP server instance.</li>\n<li><strong>fastmcp:</strong>  Optional FastMCP instance to use instead of creating a new one.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A FastMCP server instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Node</span> <span class=\"o\">|</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">built_nodes</span><span class=\"o\">.</span><span class=\"n\">concrete</span><span class=\"o\">.</span><span class=\"n\">function_base</span><span class=\"o\">.</span><span class=\"n\">RTFunction</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">server_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MCP Server&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fastmcp</span><span class=\"p\">:</span> <span class=\"n\">mcp</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">fastmcp</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">FastMCP</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.ToolManifest", "modulename": "railtracks", "qualname": "ToolManifest", "kind": "class", "doc": "<p>Creates a manifest for a tool, which includes its description and parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>description (str):</strong>  A description of the tool.</li>\n<li><strong>parameters (Iterable[Parameter] | None):</strong>  An iterable of parameters for the tool. If None, there are no paramerters.</li>\n</ul>\n"}, {"fullname": "railtracks.ToolManifest.__init__", "modulename": "railtracks", "qualname": "ToolManifest.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "railtracks.ToolManifest.description", "modulename": "railtracks", "qualname": "ToolManifest.description", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.ToolManifest.parameters", "modulename": "railtracks", "qualname": "ToolManifest.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[railtracks.llm.tools.parameter.Parameter]"}, {"fullname": "railtracks.context", "modulename": "railtracks.context", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "railtracks.context.put", "modulename": "railtracks.context", "qualname": "put", "kind": "function", "doc": "<p>Set a value in the context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The key to set.</li>\n<li><strong>value (Any):</strong>  The value to set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.context.get", "modulename": "railtracks.context", "qualname": "get", "kind": "function", "doc": "<p>Get a value from context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The key to retrieve.</li>\n<li><strong>default (Any | None):</strong>  The default value to return if the key does not exist. If set to None and the key does not exist, a KeyError will be raised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The value associated with the key, or the default value if the key does not exist.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the key does not exist and no default value is provided.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.context.update", "modulename": "railtracks.context", "qualname": "update", "kind": "function", "doc": "<p>Sets the values in the context. If the context already has values, this will overwrite them, but it will not delete any existing keys.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict[str, Any]):</strong>  The data to update the context with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.context.delete", "modulename": "railtracks.context", "qualname": "delete", "kind": "function", "doc": "<p>Delete a key from the context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The key to delete.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the key does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.context.keys", "modulename": "railtracks.context", "qualname": "keys", "kind": "function", "doc": "<p>Get the keys of the context.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KeysView[str]: The keys in the context.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">KeysView</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.integrations", "modulename": "railtracks.integrations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "railtracks.llm", "modulename": "railtracks.llm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "railtracks.llm.ModelBase", "modulename": "railtracks.llm", "qualname": "ModelBase", "kind": "class", "doc": "<p>A simple base that represents the behavior of a model that can be used for chat, structured interactions, and streaming.</p>\n\n<p>The base class allows for the insertion of hooks that can modify the messages before they are sent to the model,\nresponse after they are received, and map exceptions that may occur during the interaction.</p>\n\n<p>All the hooks are optional and can be added or removed as needed.</p>\n", "bases": "abc.ABC"}, {"fullname": "railtracks.llm.ModelBase.add_pre_hook", "modulename": "railtracks.llm", "qualname": "ModelBase.add_pre_hook", "kind": "function", "doc": "<p>Adds a pre-hook to modify messages before sending them to the model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hook</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span><span class=\"p\">],</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.add_post_hook", "modulename": "railtracks.llm", "qualname": "ModelBase.add_post_hook", "kind": "function", "doc": "<p>Adds a post-hook to modify the response after receiving it from the model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hook</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span><span class=\"p\">,</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">],</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.add_exception_hook", "modulename": "railtracks.llm", "qualname": "ModelBase.add_exception_hook", "kind": "function", "doc": "<p>Adds an exception hook to handle exceptions during model interactions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hook</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.remove_pre_hooks", "modulename": "railtracks.llm", "qualname": "ModelBase.remove_pre_hooks", "kind": "function", "doc": "<p>Removes all of the hooks that modify messages before sending them to the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.remove_post_hooks", "modulename": "railtracks.llm", "qualname": "ModelBase.remove_post_hooks", "kind": "function", "doc": "<p>Removes all of the hooks that modify the response after receiving it from the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.remove_exception_hooks", "modulename": "railtracks.llm", "qualname": "ModelBase.remove_exception_hooks", "kind": "function", "doc": "<p>Removes all of the hooks that handle exceptions during model interactions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.model_name", "modulename": "railtracks.llm", "qualname": "ModelBase.model_name", "kind": "function", "doc": "<p>Returns the name of the model being used.</p>\n\n<p>It can be treated as unique identifier for the model when paired with the <code>model_type</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.model_type", "modulename": "railtracks.llm", "qualname": "ModelBase.model_type", "kind": "function", "doc": "<p>The name of the provider of this model or the model type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.chat", "modulename": "railtracks.llm", "qualname": "ModelBase.chat", "kind": "function", "doc": "<p>Chat with the model using the provided messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.achat", "modulename": "railtracks.llm", "qualname": "ModelBase.achat", "kind": "function", "doc": "<p>Asynchronous chat with the model using the provided messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.llm.ModelBase.structured", "modulename": "railtracks.llm", "qualname": "ModelBase.structured", "kind": "function", "doc": "<p>Structured interaction with the model using the provided messages and output_schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.astructured", "modulename": "railtracks.llm", "qualname": "ModelBase.astructured", "kind": "function", "doc": "<p>Asynchronous structured interaction with the model using the provided messages and output_schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.llm.ModelBase.stream_chat", "modulename": "railtracks.llm", "qualname": "ModelBase.stream_chat", "kind": "function", "doc": "<p>Stream chat with the model using the provided messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.astream_chat", "modulename": "railtracks.llm", "qualname": "ModelBase.astream_chat", "kind": "function", "doc": "<p>Asynchronous stream chat with the model using the provided messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.llm.ModelBase.chat_with_tools", "modulename": "railtracks.llm", "qualname": "ModelBase.chat_with_tools", "kind": "function", "doc": "<p>Chat with the model using the provided messages and tools.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>,</span><span class=\"param\">\t<span class=\"n\">tools</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">Tool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.ModelBase.achat_with_tools", "modulename": "railtracks.llm", "qualname": "ModelBase.achat_with_tools", "kind": "function", "doc": "<p>Asynchronous chat with the model using the provided messages and tools.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>,</span><span class=\"param\">\t<span class=\"n\">tools</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">Tool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "railtracks.llm.ToolCall", "modulename": "railtracks.llm", "qualname": "ToolCall", "kind": "class", "doc": "<p>A simple model object that represents a tool call.</p>\n\n<p>This simple model represents a moment when a tool is called.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "railtracks.llm.ToolCall.identifier", "modulename": "railtracks.llm", "qualname": "ToolCall.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.ToolCall.name", "modulename": "railtracks.llm", "qualname": "ToolCall.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.ToolCall.arguments", "modulename": "railtracks.llm", "qualname": "ToolCall.arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "railtracks.llm.ToolCall.model_config", "modulename": "railtracks.llm", "qualname": "ToolCall.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "railtracks.llm.ToolResponse", "modulename": "railtracks.llm", "qualname": "ToolResponse", "kind": "class", "doc": "<p>A simple model object that represents a tool response.</p>\n\n<p>This simple model should be used when adding a response to a tool.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "railtracks.llm.ToolResponse.identifier", "modulename": "railtracks.llm", "qualname": "ToolResponse.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.ToolResponse.name", "modulename": "railtracks.llm", "qualname": "ToolResponse.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.ToolResponse.result", "modulename": "railtracks.llm", "qualname": "ToolResponse.result", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~AnyStr"}, {"fullname": "railtracks.llm.ToolResponse.model_config", "modulename": "railtracks.llm", "qualname": "ToolResponse.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "railtracks.llm.UserMessage", "modulename": "railtracks.llm", "qualname": "UserMessage", "kind": "class", "doc": "<p>Note that we only support string input</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content (str):</strong>  The content of the user message.</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "bases": "railtracks.llm.message.Message[str]"}, {"fullname": "railtracks.llm.UserMessage.__init__", "modulename": "railtracks.llm", "qualname": "UserMessage.__init__", "kind": "function", "doc": "<p>A simple class that represents a message that an LLM can read.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content:</strong>  The content of the message. It can take on any of the following types:\n<ul>\n<li>str: A simple string message.</li>\n<li>List[ToolCall]: A list of tool calls.</li>\n<li>ToolResponse: A tool response.</li>\n<li>BaseModel: A custom base model object.</li>\n</ul></li>\n<li><strong>role:</strong>  The role of the message (assistant, user, system, tool, etc.).</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">inject_prompt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "railtracks.llm.SystemMessage", "modulename": "railtracks.llm", "qualname": "SystemMessage", "kind": "class", "doc": "<p>A simple class that represents a system message.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content (str):</strong>  The content of the system message.</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context  variables. Defaults to True.</li>\n</ul>\n", "bases": "railtracks.llm.message.Message[str]"}, {"fullname": "railtracks.llm.SystemMessage.__init__", "modulename": "railtracks.llm", "qualname": "SystemMessage.__init__", "kind": "function", "doc": "<p>A simple class that represents a message that an LLM can read.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content:</strong>  The content of the message. It can take on any of the following types:\n<ul>\n<li>str: A simple string message.</li>\n<li>List[ToolCall]: A list of tool calls.</li>\n<li>ToolResponse: A tool response.</li>\n<li>BaseModel: A custom base model object.</li>\n</ul></li>\n<li><strong>role:</strong>  The role of the message (assistant, user, system, tool, etc.).</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">inject_prompt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "railtracks.llm.AssistantMessage", "modulename": "railtracks.llm", "qualname": "AssistantMessage", "kind": "class", "doc": "<p>A simple class that represents a message from the assistant.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content (_T):</strong>  The content of the assistant message.</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context  variables. Defaults to True.</li>\n</ul>\n", "bases": "railtracks.llm.message.Message[~_T], typing.Generic[~_T]"}, {"fullname": "railtracks.llm.AssistantMessage.__init__", "modulename": "railtracks.llm", "qualname": "AssistantMessage.__init__", "kind": "function", "doc": "<p>A simple class that represents a message that an LLM can read.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content:</strong>  The content of the message. It can take on any of the following types:\n<ul>\n<li>str: A simple string message.</li>\n<li>List[ToolCall]: A list of tool calls.</li>\n<li>ToolResponse: A tool response.</li>\n<li>BaseModel: A custom base model object.</li>\n</ul></li>\n<li><strong>role:</strong>  The role of the message (assistant, user, system, tool, etc.).</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span>, </span><span class=\"param\"><span class=\"n\">inject_prompt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "railtracks.llm.Message", "modulename": "railtracks.llm", "qualname": "Message", "kind": "class", "doc": "<p>A base class that represents a message that an LLM can read.</p>\n\n<p>Note the content may take on a variety of allowable types.</p>\n", "bases": "typing.Generic[~_T]"}, {"fullname": "railtracks.llm.Message.__init__", "modulename": "railtracks.llm", "qualname": "Message.__init__", "kind": "function", "doc": "<p>A simple class that represents a message that an LLM can read.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content:</strong>  The content of the message. It can take on any of the following types:\n<ul>\n<li>str: A simple string message.</li>\n<li>List[ToolCall]: A list of tool calls.</li>\n<li>ToolResponse: A tool response.</li>\n<li>BaseModel: A custom base model object.</li>\n</ul></li>\n<li><strong>role:</strong>  The role of the message (assistant, user, system, tool, etc.).</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span>,</span><span class=\"param\">\t<span class=\"n\">role</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;assistant&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;user&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;system&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tool&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">inject_prompt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "railtracks.llm.Message.validate_content", "modulename": "railtracks.llm", "qualname": "Message.validate_content", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.Message.content", "modulename": "railtracks.llm", "qualname": "Message.content", "kind": "variable", "doc": "<p>Collects the content of the message.</p>\n", "annotation": ": ~_T"}, {"fullname": "railtracks.llm.Message.role", "modulename": "railtracks.llm", "qualname": "Message.role", "kind": "variable", "doc": "<p>Collects the role of the message.</p>\n", "annotation": ": railtracks.llm.message.Role"}, {"fullname": "railtracks.llm.Message.inject_prompt", "modulename": "railtracks.llm", "qualname": "Message.inject_prompt", "kind": "variable", "doc": "<p>A boolean that indicates whether this message should be injected into from context.</p>\n", "annotation": ": bool"}, {"fullname": "railtracks.llm.ToolMessage", "modulename": "railtracks.llm", "qualname": "ToolMessage", "kind": "class", "doc": "<p>A simple class that represents a message that is a tool call answer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content (ToolResponse):</strong>  The tool response content for the message.</li>\n</ul>\n", "bases": "railtracks.llm.message.Message[railtracks.llm.content.ToolResponse]"}, {"fullname": "railtracks.llm.ToolMessage.__init__", "modulename": "railtracks.llm", "qualname": "ToolMessage.__init__", "kind": "function", "doc": "<p>A simple class that represents a message that an LLM can read.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>content:</strong>  The content of the message. It can take on any of the following types:\n<ul>\n<li>str: A simple string message.</li>\n<li>List[ToolCall]: A list of tool calls.</li>\n<li>ToolResponse: A tool response.</li>\n<li>BaseModel: A custom base model object.</li>\n</ul></li>\n<li><strong>role:</strong>  The role of the message (assistant, user, system, tool, etc.).</li>\n<li><strong>inject_prompt (bool, optional):</strong>  Whether to inject prompt with context variables. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">ToolResponse</span></span>)</span>"}, {"fullname": "railtracks.llm.MessageHistory", "modulename": "railtracks.llm", "qualname": "MessageHistory", "kind": "class", "doc": "<p>A basic object that represents a history of messages. The object has all the same capability as a list such as\n<code>.remove()</code>, <code>.append()</code>, etc.</p>\n", "bases": "typing.List[railtracks.llm.message.Message]"}, {"fullname": "railtracks.llm.MessageHistory.removed_system_messages", "modulename": "railtracks.llm", "qualname": "MessageHistory.removed_system_messages", "kind": "function", "doc": "<p>Returns a new MessageHistory object with all SystemMessages removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">MessageHistory</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.Tool", "modulename": "railtracks.llm", "qualname": "Tool", "kind": "class", "doc": "<p>A quasi-immutable class designed to represent a single Tool object.\nYou pass in key details (name, description, and required parameters).</p>\n"}, {"fullname": "railtracks.llm.Tool.__init__", "modulename": "railtracks.llm", "qualname": "Tool.__init__", "kind": "function", "doc": "<p>Creates a new Tool instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the tool.</li>\n<li><strong>detail:</strong>  A detailed description of the tool.</li>\n<li><strong>parameters:</strong>  Parameters attached to this tool; a set of Parameter objects, or a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">detail</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "railtracks.llm.Tool.name", "modulename": "railtracks.llm", "qualname": "Tool.name", "kind": "variable", "doc": "<p>Get the name of the tool.</p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.Tool.detail", "modulename": "railtracks.llm", "qualname": "Tool.detail", "kind": "variable", "doc": "<p>Returns the detailed description for this tool.</p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.Tool.parameters", "modulename": "railtracks.llm", "qualname": "Tool.parameters", "kind": "variable", "doc": "<p>Gets the parameters attached to this tool (if any).</p>\n", "annotation": ": Optional[List[railtracks.llm.tools.parameter.Parameter]]"}, {"fullname": "railtracks.llm.Tool.from_function", "modulename": "railtracks.llm", "qualname": "Tool.from_function", "kind": "function", "doc": "<p>Creates a Tool from a Python callable.\nUses the function's docstring and type annotations to extract details and parameter info.</p>\n\n<p>KEY NOTE: No checking is done to ensure that the inserted params match the function signature</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to create a tool from.</li>\n<li><strong>name:</strong>  Optional name for the tool. If not provided, uses the function's name.</li>\n<li><strong>details:</strong>  Optional detailed description for the tool. If not provided, extracts from the function's docstring.</li>\n<li><strong>params:</strong>  Optional parameters for the tool. If not provided, infers from the function's signature and docstring.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A Tool instance representing the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.Tool.from_mcp", "modulename": "railtracks.llm", "qualname": "Tool.from_mcp", "kind": "function", "doc": "<p>Creates a Tool from an MCP tool object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tool:</strong>  The MCP tool to create a Tool from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A Tool instance representing the MCP tool.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">tool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.Parameter", "modulename": "railtracks.llm", "qualname": "Parameter", "kind": "class", "doc": "<p>Base class for representing a tool parameter.</p>\n"}, {"fullname": "railtracks.llm.Parameter.__init__", "modulename": "railtracks.llm", "qualname": "Parameter.__init__", "kind": "function", "doc": "<p>Creates a new instance of a parameter object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the parameter.</li>\n<li><strong>param_type:</strong>  The type of the parameter.</li>\n<li><strong>description:</strong>  A description of the parameter.</li>\n<li><strong>required:</strong>  Whether the parameter is required. Defaults to True.</li>\n<li><strong>additional_properties:</strong>  Whether to allow additional properties for object types. Defaults to False.</li>\n<li><strong>enum:</strong>  The enum values for the parameter.</li>\n<li><strong>default:</strong>  The default value for the parameter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">railtracks</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">],</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;string&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;integer&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;number&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;boolean&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;array&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;object&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;null&#39;</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">required</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">additional_properties</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">enum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "railtracks.llm.Parameter.enum", "modulename": "railtracks.llm", "qualname": "Parameter.enum", "kind": "variable", "doc": "<p>Get the enum values for the parameter, if any.</p>\n", "annotation": ": Optional[list]"}, {"fullname": "railtracks.llm.Parameter.default", "modulename": "railtracks.llm", "qualname": "Parameter.default", "kind": "variable", "doc": "<p>Get the default value for the parameter, if any.</p>\n", "annotation": ": Any"}, {"fullname": "railtracks.llm.Parameter.name", "modulename": "railtracks.llm", "qualname": "Parameter.name", "kind": "variable", "doc": "<p>Get the name of the parameter.</p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.Parameter.param_type", "modulename": "railtracks.llm", "qualname": "Parameter.param_type", "kind": "variable", "doc": "<p>Get the type of the parameter.</p>\n", "annotation": ": str | list"}, {"fullname": "railtracks.llm.Parameter.description", "modulename": "railtracks.llm", "qualname": "Parameter.description", "kind": "variable", "doc": "<p>Get the description of the parameter.</p>\n", "annotation": ": str"}, {"fullname": "railtracks.llm.Parameter.required", "modulename": "railtracks.llm", "qualname": "Parameter.required", "kind": "variable", "doc": "<p>Check if the parameter is required.</p>\n", "annotation": ": bool"}, {"fullname": "railtracks.llm.Parameter.additional_properties", "modulename": "railtracks.llm", "qualname": "Parameter.additional_properties", "kind": "variable", "doc": "<p>Check if additional properties are allowed for object types.</p>\n", "annotation": ": bool"}, {"fullname": "railtracks.llm.AnthropicLLM", "modulename": "railtracks.llm", "qualname": "AnthropicLLM", "kind": "class", "doc": "<p>A large base class that wraps around a litellm model.</p>\n\n<p>Note that the model object should be interacted with via the methods provided in the wrapper class:</p>\n\n<ul>\n<li><code>chat</code></li>\n<li><code>structured</code></li>\n<li><code>stream_chat</code></li>\n<li><code>chat_with_tools</code></li>\n</ul>\n\n<p>Each individual API should implement the required <code>abstract_methods</code> in order to allow users to interact with a\nmodel of that type.</p>\n", "bases": "railtracks.llm.models.api_providers._provider_wrapper.ProviderLLMWrapper"}, {"fullname": "railtracks.llm.AnthropicLLM.model_type", "modulename": "railtracks.llm", "qualname": "AnthropicLLM.model_type", "kind": "function", "doc": "<p>Returns the name of the provider</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.HuggingFaceLLM", "modulename": "railtracks.llm", "qualname": "HuggingFaceLLM", "kind": "class", "doc": "<p>A large base class that wraps around a litellm model.</p>\n\n<p>Note that the model object should be interacted with via the methods provided in the wrapper class:</p>\n\n<ul>\n<li><code>chat</code></li>\n<li><code>structured</code></li>\n<li><code>stream_chat</code></li>\n<li><code>chat_with_tools</code></li>\n</ul>\n\n<p>Each individual API should implement the required <code>abstract_methods</code> in order to allow users to interact with a\nmodel of that type.</p>\n", "bases": "railtracks.llm.models.api_providers._provider_wrapper.ProviderLLMWrapper"}, {"fullname": "railtracks.llm.HuggingFaceLLM.model_type", "modulename": "railtracks.llm", "qualname": "HuggingFaceLLM.model_type", "kind": "function", "doc": "<p>Returns the name of the provider</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.OpenAILLM", "modulename": "railtracks.llm", "qualname": "OpenAILLM", "kind": "class", "doc": "<p>A wrapper that provides access to the OPENAI API.</p>\n", "bases": "railtracks.llm.models.api_providers._provider_wrapper.ProviderLLMWrapper"}, {"fullname": "railtracks.llm.OpenAILLM.model_type", "modulename": "railtracks.llm", "qualname": "OpenAILLM.model_type", "kind": "function", "doc": "<p>Returns the name of the provider</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.GeminiLLM", "modulename": "railtracks.llm", "qualname": "GeminiLLM", "kind": "class", "doc": "<p>A large base class that wraps around a litellm model.</p>\n\n<p>Note that the model object should be interacted with via the methods provided in the wrapper class:</p>\n\n<ul>\n<li><code>chat</code></li>\n<li><code>structured</code></li>\n<li><code>stream_chat</code></li>\n<li><code>chat_with_tools</code></li>\n</ul>\n\n<p>Each individual API should implement the required <code>abstract_methods</code> in order to allow users to interact with a\nmodel of that type.</p>\n", "bases": "railtracks.llm.models.api_providers._provider_wrapper.ProviderLLMWrapper"}, {"fullname": "railtracks.llm.GeminiLLM.full_model_name", "modulename": "railtracks.llm", "qualname": "GeminiLLM.full_model_name", "kind": "function", "doc": "<p>After the provider is checked, this method is called to get the full model name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.GeminiLLM.model_type", "modulename": "railtracks.llm", "qualname": "GeminiLLM.model_type", "kind": "function", "doc": "<p>Returns the name of the provider</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.OllamaLLM", "modulename": "railtracks.llm", "qualname": "OllamaLLM", "kind": "class", "doc": "<p>A large base class that wraps around a litellm model.</p>\n\n<p>Note that the model object should be interacted with via the methods provided in the wrapper class:</p>\n\n<ul>\n<li><code>chat</code></li>\n<li><code>structured</code></li>\n<li><code>stream_chat</code></li>\n<li><code>chat_with_tools</code></li>\n</ul>\n\n<p>Each individual API should implement the required <code>abstract_methods</code> in order to allow users to interact with a\nmodel of that type.</p>\n", "bases": "railtracks.llm.models._litellm_wrapper.LiteLLMWrapper"}, {"fullname": "railtracks.llm.OllamaLLM.__init__", "modulename": "railtracks.llm", "qualname": "OllamaLLM.__init__", "kind": "function", "doc": "<p>Initialize an Ollama LLM instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name (str):</strong>  Name of the Ollama model to use.</li>\n<li><strong>domain (Literal[\"default\", \"auto\", \"custom\"], optional):</strong>  The domain configuration mode.\n<ul>\n<li>\"default\": Uses the default localhost domain (<a href=\"http://localhost:11434\"><a href=\"http://localhost:11434\">http://localhost:11434</a></a>)</li>\n<li>\"auto\": Uses the OLLAMA_HOST environment variable, raises OllamaError if not set</li>\n<li>\"custom\": Uses the provided custom_domain parameter, raises OllamaError if not provided\nDefaults to \"default\".</li>\n</ul></li>\n<li><strong>custom_domain (str | None, optional):</strong>  Custom domain URL to use when domain is set to \"custom\".\nMust be provided if domain=\"custom\". Defaults to None.</li>\n<li><strong>**kwargs:</strong>  Additional arguments passed to the parent LiteLLMWrapper.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OllamaError:</strong>  If:\n<ul>\n<li>domain is \"auto\" and OLLAMA_HOST environment variable is not set</li>\n<li>domain is \"custom\" and custom_domain is not provided</li>\n<li>specified model is not available on the server</li>\n</ul></li>\n<li><strong>RequestException:</strong>  If connection to Ollama server fails</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;auto&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;custom&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">custom_domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "railtracks.llm.OllamaLLM.logger", "modulename": "railtracks.llm", "qualname": "OllamaLLM.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.llm.OllamaLLM.chat_with_tools", "modulename": "railtracks.llm", "qualname": "OllamaLLM.chat_with_tools", "kind": "function", "doc": "<p>Chat with the model using the provided messages and tools.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span>, </span><span class=\"param\"><span class=\"n\">tools</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.OllamaLLM.model_type", "modulename": "railtracks.llm", "qualname": "OllamaLLM.model_type", "kind": "function", "doc": "<p>The name of the provider of this model or the model type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.AzureAILLM", "modulename": "railtracks.llm", "qualname": "AzureAILLM", "kind": "class", "doc": "<p>A large base class that wraps around a litellm model.</p>\n\n<p>Note that the model object should be interacted with via the methods provided in the wrapper class:</p>\n\n<ul>\n<li><code>chat</code></li>\n<li><code>structured</code></li>\n<li><code>stream_chat</code></li>\n<li><code>chat_with_tools</code></li>\n</ul>\n\n<p>Each individual API should implement the required <code>abstract_methods</code> in order to allow users to interact with a\nmodel of that type.</p>\n", "bases": "railtracks.llm.models._litellm_wrapper.LiteLLMWrapper"}, {"fullname": "railtracks.llm.AzureAILLM.__init__", "modulename": "railtracks.llm", "qualname": "AzureAILLM.__init__", "kind": "function", "doc": "<p>Initialize an Azure AI LLM instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name (str):</strong>  Name of the Azure AI model to use.</li>\n<li><strong>**kwargs:</strong>  Additional arguments passed to the parent LiteLLMWrapper.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AzureAIError:</strong>  If the specified model is not available or if there are issues with the Azure AI service.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "railtracks.llm.AzureAILLM.model_type", "modulename": "railtracks.llm", "qualname": "AzureAILLM.model_type", "kind": "function", "doc": "<p>The name of the provider of this model or the model type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.AzureAILLM.logger", "modulename": "railtracks.llm", "qualname": "AzureAILLM.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "railtracks.llm.AzureAILLM.chat", "modulename": "railtracks.llm", "qualname": "AzureAILLM.chat", "kind": "function", "doc": "<p>Chat with the model using the provided messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.llm.AzureAILLM.chat_with_tools", "modulename": "railtracks.llm", "qualname": "AzureAILLM.chat_with_tools", "kind": "function", "doc": "<p>Chat with the model using the provided messages and tools.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">messages</span>, </span><span class=\"param\"><span class=\"n\">tools</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.prebuilt", "modulename": "railtracks.prebuilt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "railtracks.prebuilt.rag_node", "modulename": "railtracks.prebuilt", "qualname": "rag_node", "kind": "function", "doc": "<p>Creates a rag node that allows you to vector the search the provided documents.</p>\n\n<p>Args:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">documents</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">embed_model</span><span class=\"o\">=</span><span class=\"s1\">&#39;text-embedding-3-small&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_model</span><span class=\"o\">=</span><span class=\"s1\">&#39;gpt-4o&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_overlap</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "railtracks.prebuilt.rag_node", "modulename": "railtracks.prebuilt.rag_node", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "railtracks.prebuilt.rag_node.rag_node", "modulename": "railtracks.prebuilt.rag_node", "qualname": "rag_node", "kind": "function", "doc": "<p>Creates a rag node that allows you to vector the search the provided documents.</p>\n\n<p>Args:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">documents</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">embed_model</span><span class=\"o\">=</span><span class=\"s1\">&#39;text-embedding-3-small&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_model</span><span class=\"o\">=</span><span class=\"s1\">&#39;gpt-4o&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_overlap</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();